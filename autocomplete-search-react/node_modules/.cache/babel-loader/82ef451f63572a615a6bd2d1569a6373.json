{"ast":null,"code":"var _jsxFileName = \"/home/jishi/Documents/maps/src/components/Map.js\";\nimport React from 'react';\nimport \"react-google-maps\";\nimport PlacesAutoComplete from 'react-native-places-autocomplete';\n\nconst _ = require(\"lodash\");\n\nconst {\n  compose,\n  withProps,\n  lifecycle\n} = require(\"recompose\");\n\nconst {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker\n} = require(\"react-google-maps\");\n\nconst {\n  SearchBox\n} = require(\"react-google-maps/lib/components/places/SearchBox\");\n\nconst MapWithASearchBox = compose(withProps({\n  googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBnMgpmxFe7_bytTB8VlPW5s1lOAoaqujw&v=3.exp&libraries=geometry,drawing,places\",\n  loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: `100%`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 21\n    }\n  }),\n  containerElement: /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: `400px`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 23\n    }\n  }),\n  mapElement: /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: `100%`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 17\n    }\n  })\n}), lifecycle({\n  componentWillMount() {\n    const refs = {};\n    this.setState({\n      bounds: null,\n      center: {\n        lat: 41.9,\n        lng: -87.624\n      },\n      markers: [],\n      onMapMounted: ref => {\n        refs.map = ref;\n      },\n      onBoundsChanged: () => {\n        this.setState({\n          bounds: refs.map.getBounds(),\n          center: refs.map.getCenter()\n        });\n      },\n      onSearchBoxMounted: ref => {\n        refs.searchBox = ref;\n      },\n      onPlacesChanged: () => {\n        const places = refs.searchBox.getPlaces();\n        const bounds = new google.maps.LatLngBounds();\n        places.forEach(place => {\n          if (place.geometry.viewport) {\n            bounds.union(place.geometry.viewport);\n          } else {\n            bounds.extend(place.geometry.location);\n          }\n        });\n        const nextMarkers = places.map(place => ({\n          position: place.geometry.location\n        }));\n\n        const nextCenter = _.get(nextMarkers, '0.position', this.state.center);\n\n        this.setState({\n          center: nextCenter,\n          markers: nextMarkers\n        }); // refs.map.fitBounds(bounds);\n      }\n    });\n  }\n\n}), withScriptjs, withGoogleMap)(props => /*#__PURE__*/React.createElement(GoogleMap, {\n  ref: props.onMapMounted,\n  defaultZoom: 15,\n  center: props.center,\n  onBoundsChanged: props.onBoundsChanged,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(SearchBox, {\n  ref: props.onSearchBoxMounted,\n  bounds: props.bounds,\n  controlPosition: google.maps.ControlPosition.TOP_LEFT,\n  onPlacesChanged: props.onPlacesChanged,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(\"input\", {\n  type: \"text\",\n  placeholder: \"Customized your placeholder\",\n  style: {\n    boxSizing: `border-box`,\n    border: `1px solid transparent`,\n    width: `240px`,\n    height: `32px`,\n    marginTop: `27px`,\n    padding: `0 12px`,\n    borderRadius: `3px`,\n    boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\n    fontSize: `14px`,\n    outline: `none`,\n    textOverflow: `ellipses`\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 7\n  }\n})), props.markers.map((marker, index) => /*#__PURE__*/React.createElement(Marker, {\n  key: index,\n  position: marker.position,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 7\n  }\n}))));\n\n/*#__PURE__*/\nReact.createElement(MapWithASearchBox, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 1\n  }\n});\nexport default withGoogleMap(MapWithASearchBox);","map":{"version":3,"sources":["/home/jishi/Documents/maps/src/components/Map.js"],"names":["React","PlacesAutoComplete","_","require","compose","withProps","lifecycle","withScriptjs","withGoogleMap","GoogleMap","Marker","SearchBox","MapWithASearchBox","googleMapURL","loadingElement","height","containerElement","mapElement","componentWillMount","refs","setState","bounds","center","lat","lng","markers","onMapMounted","ref","map","onBoundsChanged","getBounds","getCenter","onSearchBoxMounted","searchBox","onPlacesChanged","places","getPlaces","google","maps","LatLngBounds","forEach","place","geometry","viewport","union","extend","location","nextMarkers","position","nextCenter","get","state","props","ControlPosition","TOP_LEFT","boxSizing","border","width","marginTop","padding","borderRadius","boxShadow","fontSize","outline","textOverflow","marker","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {   } from \"react-google-maps\";\nimport PlacesAutoComplete from 'react-native-places-autocomplete';\n\nconst _ = require(\"lodash\");\nconst { compose, withProps, lifecycle } = require(\"recompose\");\nconst {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n} = require(\"react-google-maps\");\nconst { SearchBox } = require(\"react-google-maps/lib/components/places/SearchBox\");\nconst MapWithASearchBox = compose(\n  withProps({\n    googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBnMgpmxFe7_bytTB8VlPW5s1lOAoaqujw&v=3.exp&libraries=geometry,drawing,places\",\n    loadingElement: <div style={{ height: `100%` }} />,\n    containerElement: <div style={{ height: `400px` }} />,\n    mapElement: <div style={{ height: `100%` }} />,\n  }),\n  lifecycle({\n    componentWillMount() {\n      const refs = {}\n      this.setState({\n        bounds: null,\n        center: {\n          lat: 41.9, lng: -87.624\n        },\n        markers: [],\n        onMapMounted: ref => {\n          refs.map = ref;\n        },\n        onBoundsChanged: () => {\n          this.setState({\n            bounds: refs.map.getBounds(),\n            center: refs.map.getCenter(),\n          })\n        },\n        onSearchBoxMounted: ref => {\n          refs.searchBox = ref;\n        },\n        onPlacesChanged: () => {\n          const places = refs.searchBox.getPlaces();\n          const bounds = new google.maps.LatLngBounds();\n          places.forEach(place => {\n            if (place.geometry.viewport) {\n              bounds.union(place.geometry.viewport)\n            } else {\n              bounds.extend(place.geometry.location)\n            }\n          });\n          const nextMarkers = places.map(place => ({\n            position: place.geometry.location,\n          }));\n          const nextCenter = _.get(nextMarkers, '0.position', this.state.center);\n          this.setState({\n            center: nextCenter,\n            markers: nextMarkers,\n          });\n          // refs.map.fitBounds(bounds);\n        },\n      })\n    },\n  }),\n  withScriptjs,\n  withGoogleMap\n)(props =>\n  <GoogleMap\n    ref={props.onMapMounted}\n    defaultZoom={15}\n    center={props.center}\n    onBoundsChanged={props.onBoundsChanged}\n  >\n    <SearchBox\n      ref={props.onSearchBoxMounted}\n      bounds={props.bounds}\n      controlPosition={google.maps.ControlPosition.TOP_LEFT}\n      onPlacesChanged={props.onPlacesChanged}\n    >\n      <input\n        type=\"text\"\n        placeholder=\"Customized your placeholder\"\n        style={{\n          boxSizing: `border-box`,\n          border: `1px solid transparent`,\n          width: `240px`,\n          height: `32px`,\n          marginTop: `27px`,\n          padding: `0 12px`,\n          borderRadius: `3px`,\n          boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\n          fontSize: `14px`,\n          outline: `none`,\n          textOverflow: `ellipses`,\n        }}\n      />\n    </SearchBox>\n    {props.markers.map((marker, index) =>\n      <Marker key={index} position={marker.position} />\n    )}\n  </GoogleMap>\n);\n<MapWithASearchBox />\nexport default withGoogleMap(MapWithASearchBox);"]},"metadata":{},"sourceType":"module"}